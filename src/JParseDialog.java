package jhelpviewer;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;

import java.io.File;

/**
 * @author neurocod
 *
 */
public class JParseDialog extends JDialog
{
	private static final long serialVersionUID = 1L;

	protected void updateUI()
	{
		btnStart.setEnabled(isSpecifiedFileReadyToScan && !isScanRunning);
	}
	protected void setScanRunning(boolean running)
	{
		isScanRunning = running;
		updateUI();
	}
	protected void setReadyToScanState(boolean ready)
	{
		isSpecifiedFileReadyToScan = ready;
		updateUI();
	}
	
	protected boolean isAllowedDirectory(File existingDir)
	{
		File baseDir = existingDir;
		
		File indexDir = null;
		String []strParts = {"api", "index-files"};
		//is this already searched dir?
		File upBaseDir = baseDir.getParentFile();
		if(null==containsDirectory(upBaseDir, strParts[strParts.length-1]))
		{
			//maybe will find inside?
			for (int i = 0; i < strParts.length; i++)
			{
				File curDir = baseDir;
				int j = i;
				for ( ; j < strParts.length; j++)
				{
					String part = strParts[j];
					curDir = containsDirectory(curDir, part);
					if(curDir==null)
						break;
				}
				if(curDir!=null && j==strParts.length)
				{
					indexDir = curDir;
					break;
				}
			}
		}
		else
		{
			indexDir = baseDir;
		}
		
		return (indexDir!=null);
	}
	
	//protected void directoryChanged()
	
	protected void maybeFileChanged()
	{
		String strFile = textFieldDirectory.getText();
		if(lastCheckedDir.equals(strFile))
			return;
		lastCheckedDir = strFile;
		
		setReadyToScanState(false);
		
		File baseFile = new File(strFile);
		if(!baseFile.exists())
			return;
		if(!baseFile.isDirectory())
		{
			setReadyToScanState(true);
			return;
		}
		boolean allowedDir = isAllowedDirectory(baseFile);
		setReadyToScanState(allowedDir);
	}
	
	protected File containsDirectory(File file, String dirName)
	{
		File f = new File(file, dirName);
		if(f.exists() && f.isDirectory())
			return f;
		return null;
	}
	
	protected void openBrowseDialog()
	{
		File curDir = new File(textFieldDirectory.getText());
		chooser.setCurrentDirectory(curDir);
		int retVal = chooser.showOpenDialog(this);
		if(JFileChooser.APPROVE_OPTION == retVal)
		{
			File file = chooser.getSelectedFile();
			textFieldDirectory.setText(file.getAbsolutePath());
			maybeFileChanged();
		}
	}
	
	protected void startScanDocumentation()
	{
		File file = new File(textFieldDirectory.getText());
		if(!file.exists())
		{
			assert(false);
		}
		
		String apath = file.getAbsolutePath();
		if(file.isDirectory())
			apath = apath+File.separatorChar;
		final String path = apath; 
		Thread t = new Thread(new Runnable()
		{
			@Override
			public void run()
			{
				setScanRunning(true);
				manager.parseIndexFiles(path, new LoadDocIndexListenerAdapter()
				{
					@Override
					public void indexChanged()
					{
					}

					@Override
					public void loadIndexError(String description)
					{
						//thread safe method
						output.append(description);
					}

					@Override
					public void loadIndexSuccess()
					{
						output.append("Success");
					}

					@Override
					public void loadNotify(String description)
					{
						//thread safe method
						output.append(description);
					}

				}, newDocIndex);
				setScanRunning(false);
			}
		});
		t.start();
	}
	
	public JParseDialog(JFrame owner, final HtmlJavaDocIOManager manager)
	{
		super(owner, true);
		this.manager = manager;
		if(inDebugMode)
			this.textFieldDirectory.setText("F:\\Java\\docs\\api\\index-files\\");
		//this.manager = manager;
		setTitle("Find and load documentation");
		BorderLayout layout = new BorderLayout();//getContentPane(), BoxLayout.Y_AXIS
		getContentPane().setLayout(layout);
		
		output.setEditable(false);

		JPanel panelTop = new JPanel();
		{
			JPanel panelFile = new JPanel();
			{
				panelFile.setLayout(new BoxLayout(panelFile, BoxLayout.X_AXIS));
				//panelFile.add(new JLabel("Select directory:"), BorderLayout.NORTH);
				textFieldDirectory.addKeyListener(new KeyAdapter()
				{
					@Override
					public void keyReleased(KeyEvent e)
					{
						maybeFileChanged();
					}	
				});
				panelFile.add(textFieldDirectory);
				JButton btnBrowse = new JButton("Browse");
				btnBrowse.addActionListener(new ActionListener()
				{
					@Override
					public void actionPerformed(ActionEvent e)
					{
						openBrowseDialog();
					}
				});
				
				panelFile.add(btnBrowse);
			}

			panelTop.setLayout(new BoxLayout(panelTop, BoxLayout.Y_AXIS));
			panelTop.add(new JLabel("1) Download any html documentation, generated by standart JavaDoc. Unpack it."));
			panelTop.add(new JLabel("2) Specify directory with that documentation:"));
			panelTop.add(panelFile, BorderLayout.NORTH);
			//add(new JScrollPane(output));
			panelTop.add(new JLabel("Process output:"));
		}
		
		add(panelTop, BorderLayout.NORTH);		
		
		add(new JScrollPane(output), BorderLayout.CENTER);
		
		JPanel buttonsPanel = new JPanel();
		add(buttonsPanel, BorderLayout.SOUTH);
		buttonsPanel.setLayout(new FlowLayout());
		buttonsPanel.add(btnStart);
		buttonsPanel.add(btnCancel);
		buttonsPanel.add(btnFinish);
		btnStart.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				startScanDocumentation();
			}
		});
		
		btnFinish.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				manager.finalizeIndexAndReplaceDocumentation(newDocIndex);
				manager.saveIfNotEmpty();
				dispose();
			}
		});
		
		setSize(640, 480);
		maybeFileChanged();
	}
	private JButton btnStart = new JButton("Start scan/parse");
	private JButton btnCancel = new JButton("Cancel");
	private JButton btnFinish = new JButton("Finish");
	private JTextArea output = new JTextArea();
	private JTextField textFieldDirectory = new JTextField();
	final HtmlJavaDocIOManager manager;
	private boolean inDebugMode = true;
	private String lastCheckedDir = "";
	private JFileChooser chooser;
	{
		chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		chooser.setFileFilter(new FileFilter()
		{

			@Override
			public boolean accept(File f)
			{
				if(f.isDirectory())
					return true;
				if(f.getName().contains("index"))
					return true;
				return false;
			}

			@Override
			public String getDescription()
			{
				// TODO Auto-generated method stub
				return null;
			}
			
		});
	}
	//private HtmlJavaDocIOManager manager;
	private HtmlJavaDocIndex newDocIndex = new HtmlJavaDocIndex();
	private volatile boolean isSpecifiedFileReadyToScan=false;
	private volatile boolean isScanRunning=false;
}