package jhelpviewer;
//Part of this file was generated by FilterBuilder. http://htmlparser.org
//[aced0005737200246f72672e68746d6c7061727365722e66696c746572732e5461674e616d6546696c746572b28b2601a614890f0200014c00056d4e616d657400124c6a6176612f6c616e672f537472696e673b787074000141]
//import javax.swing.*;
import java.io.File;

import jhelpviewer.DocItem.Type;

import org.htmlparser.Node;
import org.htmlparser.NodeFilter;
import org.htmlparser.Tag;
import org.htmlparser.beans.FilterBean;
import org.htmlparser.filters.TagNameFilter;

public class HtmlJavaDocParser
{
	public HtmlJavaDocParser(HtmlJavaDocIndex target)
	{
		this.target = target;
	}
	
	static class StringToType
	{
		public String str;
		public DocItem.Type type;
		StringToType(String str, DocItem.Type type)
		{
			this.str = str;
			this.type = type;
		}
	}
	static StringToType [] stringsToTypes = {
			new StringToType("variable in ", 	DocItem.Type.Variable),
			new StringToType(" - class", 		DocItem.Type.Class),
			new StringToType("interface in ", 	DocItem.Type.Interface),
			new StringToType("method in ",		DocItem.Type.Method),
			new StringToType("constructor for ",DocItem.Type.Constructor),
			new StringToType("exception in ", 	DocItem.Type.Exeption),
			new StringToType("enum in ", 		DocItem.Type.Enum),
			new StringToType("error in ", 		DocItem.Type.Error),
			new StringToType("annotation type in ", DocItem.Type.Annotation),
			
			//must be last
			new StringToType("package ", DocItem.Type.Package),
	};
	
	public void addErrorMessage(String str)
	{
		System.out.println(str);
	}
	
	protected void parseDTNodeToDocItem(Node nodeDT, File parsedFile, String basicDir)
	{
		String description = nodeDT.getChildren().asString();
		if(null==description || description.isEmpty())
		{
			return;
		}
		String fileName = null;
		Node [] nodesInDT = nodeDT.getChildren().toNodeArray();
		for(Node nodeInDT: nodesInDT)
		{
			if(nodeInDT instanceof Tag)
			{
				Tag tag = (Tag)nodeInDT;
				if(tag.getTagName().equalsIgnoreCase("a")
						//title has links to type at the end of description
						//&& null==tag.getAttribute("title")
						)
				{
					String str = tag.getChildren().asString();
					if(description.startsWith(str))
					{
						fileName = tag.getAttribute("href");
						break;
					}
				}
			}
		}
		
		if(null==fileName)
		{
			addErrorMessage(parsedFile.getPath()+"\nno filename!! :"+nodeDT.toString());
			return;
		}
		
		description = description.trim();
		description = description.replace('\r', ' ');
		description = description.replace('\n', ' ');
		description = description.replace('\t', ' ');
		description = description.replace("  ", " ");
		description = description.replace("&lt;", "<");
		description = description.replace("&gt;", ">");
//		if(description.contains("DstAtop"))
//		{
//			System.out.println(description);
//		}
		
		DocItem.Type type = getTypeByDescription(description);
		String nameWithSignature = getNameWithSignatureByDescription(description);
		String name = getNameByNameWithSignature(nameWithSignature);
		String container = getContainerByTypeDescriptionAndName(type, description, name);
		
		DocItem docItem = new DocItem(name, type, basicDir+fileName);
		docItem.setClassOrPackage(container);
		docItem.setDescription(description);
		docItem.setNameWithSignature(nameWithSignature);
		target.add(docItem);
		if(type == Type.Unknown)
		{
			System.out.println(docItem);
			System.out.println("\nunknown type: " + type);
		}
	}
	
	public void parseFile(File file)
	{
		System.gc();
		TagNameFilter filter0 = new TagNameFilter();
		filter0.setName("DT");
		NodeFilter[] array0 = new NodeFilter[1];
		array0[0] = filter0;
		FilterBean bean = new FilterBean();
		bean.setFilters(array0);
		
		String basicDir = "File:///"+file.getParentFile().getPath()+File.separatorChar;//file.getPath();
		
		bean.setURL(file.getPath());
		Node nodesDT [] = bean.getNodes().toNodeArray();
		//html tags description:
		//dl - definition list
		//dt - definition term within a definition list
		//dd - the definition in a definition list
		for (Node nodeDT : nodesDT)
		{
			parseDTNodeToDocItem(nodeDT, file, basicDir);
		}
		//bean.getConnection().getInputStream().close();
	}
	
	public static DocItem.Type getTypeByDescription(String description)
	{
		DocItem.Type type = DocItem.Type.Unknown;
		String descLower = description.toLowerCase();
		for (StringToType stringToType : stringsToTypes)
		{
			if(descLower.contains(stringToType.str))
			{
				type = stringToType.type;
				break;
			}
		}
		return type;
	}
	
	public static String getContainerByTypeDescriptionAndName(DocItem.Type type, String description, String name)
	{
		int indexOfLastSpace = description.lastIndexOf(' ');
		String container = (indexOfLastSpace==-1) ? description : description.substring(indexOfLastSpace);
		if(DocItem.isContainerJavaType(type))
		{
			container = container + "." + name;
		}
		return container;
	}
	
	public static String getNameWithSignatureByDescription(String description)
	{
		String nameWithSignature;
		int indexOfSMS = description.indexOf(" - ");
		if(indexOfSMS>0)
			nameWithSignature = description.substring(0, indexOfSMS);
		else
			nameWithSignature = description;
		return nameWithSignature;
	}
	
	public static String getNameByNameWithSignature(String nameWithSignature)
	{		
		String name;
		int indexOfBrace = nameWithSignature.indexOf('(');
		if(indexOfBrace>=0)
			name = nameWithSignature.substring(0, indexOfBrace);
		else
			name = nameWithSignature;
		int indexOfDot = name.indexOf('.');
		if(indexOfDot >=0)
			name = name.substring(indexOfDot+1);
		return name;
	}
	protected HtmlJavaDocIndex target;
	public void setParseTarget(HtmlJavaDocIndex target)
	{
		this.target = target;
	}
}
